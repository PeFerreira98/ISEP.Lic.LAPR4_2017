/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.red.s3.ipc.n1140388.chatrooms.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import lapr4.blue.s2.ipc.n1140956.ChatApplication.ChatUser;
import lapr4.green.s1.ipc.n1151211.comm.CommExtension2;
import lapr4.red.s3.ipc.n1140388.chatrooms.ChatRoom;
import lapr4.red.s3.ipc.n1140388.chatrooms.controller.ChatRoomApplicationController;

/**
 *
 * @author Alexandra Ferreira 1140388
 */
public class CreateChatRoomUI extends javax.swing.JFrame implements Observer {

    /**
     * The chat room created
     */
    private ChatRoom room;

    /**
     * The list of invites
     */
    private List<ChatUser> invites;

    /**
     * The Login Participant Controller
     */
    // private ChatRoomController controller;
    private ChatRoomApplicationController chatRoomcontroller;

    // private CommunicateController cont;
    /**
     * Creates new form CreateChatRoomUI
     *
     * @param controller the controller
     */
    public CreateChatRoomUI(ChatRoomApplicationController controller) {

        chatRoomcontroller = controller;
        ChatUser activeParticipant = chatRoomcontroller.owner();

        if (activeParticipant != null) {
            invites = new ArrayList<>();
            initComponents();

            this.btnPublic.setSelected(true);
            this.btnAddInvite.setVisible(false);
            this.lblInvites.setVisible(false);
            this.jList1.setVisible(false);

            //  cont.getListener().addObserver(this);
            chatRoomcontroller.getListener().addObserver(this);

            setResizable(false);
            setLocationRelativeTo(null);
            setVisible(true);

        } else {
            JOptionPane.showMessageDialog(CreateChatRoomUI.this, "You need to be logged in order to create a chat room!", "Not logged", JOptionPane.WARNING_MESSAGE);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblType = new javax.swing.JLabel();
        btnPublic = new javax.swing.JRadioButton();
        btnPrivate = new javax.swing.JRadioButton();
        lblInvites = new javax.swing.JLabel();
        btnAddInvite = new javax.swing.JButton();
        btnCreateRoom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblName.setText("Name: ");

        lblType.setText("Type:");

        btnPublic.setText("Public");
        btnPublic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPublicActionPerformed(evt);
            }
        });

        btnPrivate.setText("Private");
        btnPrivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrivateActionPerformed(evt);
            }
        });

        lblInvites.setText("Invites:");

        btnAddInvite.setText("Add Invite");
        btnAddInvite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInviteActionPerformed(evt);
            }
        });

        btnCreateRoom.setText("Create Room");
        btnCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoomActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addGap(21, 21, 21)
                        .addComponent(txtName))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblType)
                            .addComponent(lblInvites))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnPublic)
                                .addGap(59, 59, 59)
                                .addComponent(btnPrivate))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnAddInvite)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCreateRoom))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(btnPublic)
                    .addComponent(btnPrivate))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInvites)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddInvite)
                    .addComponent(btnCreateRoom))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPublicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPublicActionPerformed
        this.btnPrivate.setSelected(false);
        this.btnAddInvite.setVisible(false);
        this.lblInvites.setVisible(false);
        this.jList1.setVisible(false);
    }//GEN-LAST:event_btnPublicActionPerformed

    private void btnPrivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrivateActionPerformed
        this.btnPublic.setSelected(false);
        this.btnAddInvite.setVisible(true);
        this.lblInvites.setVisible(true);
        this.jList1.setVisible(true);
    }//GEN-LAST:event_btnPrivateActionPerformed

    private void btnAddInviteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInviteActionPerformed
        if (jList1.getSelectedValue() != null) {
            String selected = jList1.getSelectedValue();
            String nick = selected.split("/")[0];
            // String ip = "/" + nick;
            //System.out.println(this.chatRoomcontroller.getChatUsersList());
            ChatUser user = this.chatRoomcontroller.getChatUsersList().getUserByMachineName(nick);

            invites.add(user);
            //  jList1.removeItem(jList1.getSelectedValue());
            JOptionPane.showMessageDialog(this, "Participant Added", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAddInviteActionPerformed

    private void btnCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRoomActionPerformed
        if (!this.txtName.getText().trim().isEmpty()) {
            if (this.btnPublic.isSelected()) {
                room = chatRoomcontroller.createChatRoom(this.txtName.getText().trim(), 1, null);
            } else if (this.btnPrivate.isSelected()) {
                room = chatRoomcontroller.createChatRoom(this.txtName.getText().trim(), 2, invites);
            }

            if (room != null) {
                chatRoomcontroller.startChat(room);
                JOptionPane.showMessageDialog(this, "You have succesfully created your Chat Room", "Success", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnCreateRoomActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddInvite;
    private javax.swing.JButton btnCreateRoom;
    private javax.swing.JRadioButton btnPrivate;
    private javax.swing.JRadioButton btnPublic;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInvites;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblType;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        ArrayList<String> peers = chatRoomcontroller.getListener().getServicePeers(CommExtension2.NAME);

        for (String user : peers) {
            String tmp[] = user.split("@");

            String machineName = tmp[0] + "@";
            String id = tmp[1];

            ChatUser chatUser = new ChatUser(machineName, id);
            if (!this.chatRoomcontroller.getUsers().containsKey(id)) {
                chatUser.setStatus(true);
                this.chatRoomcontroller.addChatUser(chatUser);
            } else {
                this.chatRoomcontroller.getChatUsersList().getUserByIP(id).setStatus(true);
            }

            //with persistence
//            User user = new User(machineName,ip);
//            this.controller.changeUserStatus(user,true);
        }

        for (ChatUser user : this.chatRoomcontroller.getUsers().values()) {

            String aux = user.getMachineName() + user.getIp();
            if (!peers.contains(aux)) {
                user.setStatus(false);
            }
        }

        //with persistence
//        for (User user : this.controller.getUsers()) {
//            String aux = user.getMachineName() + user.getIp();
//            if (!peers.contains(aux)) {
//                this.controller.changeUserStatus(user, false)
//            }
//        }
        updateList(this.chatRoomcontroller.getChatUsersList().getUserList());
//        updateList(peers);

    }

    public void updateList(HashMap<String, ChatUser> list) {

        DefaultListModel model = new DefaultListModel();
        int flag = 0;
//        for (String onlineUser : list) {
//            model.addElement(onlineUser);
//        }
        list.values().stream().forEach((object) -> {
            if (object.equals(this.chatRoomcontroller.owner())) {

            } else if (object.isOnline()) {
                if (!object.getNickname().equalsIgnoreCase("")) {
                    model.addElement(object.getNickname() + "(Online)");
                } else {
                    model.addElement(object.getMachineName() + object.getIp() + "(Online)");
                }
            } else if (!object.getNickname().equalsIgnoreCase("")) {
                model.addElement(object.getNickname() + "(Offline)");
            } else {
                model.addElement(object.getMachineName() + object.getIp() + "(Offline)");
            }
        });

        jList1.setModel(model);
    }
}
