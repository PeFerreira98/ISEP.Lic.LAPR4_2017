/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.green.s2.core.n1970581.autodescriptionextensions.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import lapr4.green.s2.core.n1970581.autodescriptionextensions.ExtensionDTO;
import lapr4.green.s2.core.n1970581.autodescriptionextensions.controller.DescriptionExtensionLoaderController;

/**
 * Ui for the user interacting with the DescriptionExtensionLoader through the controller.
 * @author Hugo
 */
public class DescriptionExtensionLoaderUi extends javax.swing.JFrame {

    /** The controller for  the UI */
    private final DescriptionExtensionLoaderController ctrl;
    
    private final DescriptionExtensionLoaderUi janela;
    
    /**
     * Creates new form DescriptionExtensionLoaderUi
     * @param ctrl The controller for  the UI
     * @param allExtensionsList a list with all the extensions type ExtensionDTO
     * @param defaultLoadList a list with the pre selected default extension to load type ExtensionDTO
     */
    public DescriptionExtensionLoaderUi(DescriptionExtensionLoaderController ctrl, List<ExtensionDTO> allExtensionsList , List<ExtensionDTO> defaultLoadList ) {
        this.ctrl = ctrl;
        initComponents();
        for(ExtensionDTO exDTO : allExtensionsList){ ((DefaultListModel) this.jListAllExtensions.getModel()).addElement(exDTO);}
        for(ExtensionDTO exDTO : defaultLoadList){ ((DefaultListModel) this.jListListToload.getModel()).addElement(exDTO);}
        this.janela = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAccept = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListAllExtensions = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListListToload = new javax.swing.JList();
        jButtonAbort = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonClearLoadList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Versionated Extension Loader");
        setMinimumSize(new java.awt.Dimension(800, 600));

        jButtonAccept.setBackground(new java.awt.Color(204, 255, 204));
        jButtonAccept.setText("Accept");
        jButtonAccept.setToolTipText("Load the Extension on the right");
        jButtonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAcceptActionPerformed(evt);
            }
        });

        jListAllExtensions.setModel(new DefaultListModel<ExtensionDTO>());
        jListAllExtensions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAllExtensions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListAllExtensionsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListAllExtensions);

        jListListToload.setModel(new DefaultListModel<ExtensionDTO>());
        jListListToload.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jListListToload);

        jButtonAbort.setBackground(new java.awt.Color(255, 255, 0));
        jButtonAbort.setText("Use default configuration");
        jButtonAbort.setToolTipText("Use default extension.props file");
        jButtonAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAbortActionPerformed(evt);
            }
        });

        jTextAreaInfo.setEditable(false);
        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setRows(5);
        jScrollPane3.setViewportView(jTextAreaInfo);

        jButtonAdd.setBackground(new java.awt.Color(0, 153, 255));
        jButtonAdd.setText("ADD");
        jButtonAdd.setToolTipText("Copy selected item to the right");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setBackground(new java.awt.Color(255, 153, 153));
        jButtonRemove.setText("REMOVE");
        jButtonRemove.setToolTipText("Remove selected item");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Available extensions");

        jLabel2.setText("Extensions to load");

        jButtonClearLoadList.setBackground(new java.awt.Color(255, 0, 0));
        jButtonClearLoadList.setText("Clear");
        jButtonClearLoadList.setToolTipText("Clear the above list");
        jButtonClearLoadList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearLoadListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonAdd))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 134, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButtonAbort)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonAccept)
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButtonClearLoadList)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonRemove))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonRemove)
                    .addComponent(jButtonClearLoadList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAbort)
                    .addComponent(jButtonAccept))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListAllExtensionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListAllExtensionsMouseClicked
        // TODO add your handling code here:
        ExtensionDTO dto = (ExtensionDTO) this.jListAllExtensions.getSelectedValue();
        if (dto != null){
            String name = dto.getName();
            int version = dto.version();
            String desc = dto.description();
            String className = dto.className();
            String text = "Name: " + name + " \nVersion: " + version + "\n" + "Class: " + className + "\nDescription: " + desc;
            this.jTextAreaInfo.setText(text);
        }
    }//GEN-LAST:event_jListAllExtensionsMouseClicked

    /**
     * Abort code of button
     * @param evt ActionEvent
     */
    private void jButtonAbortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAbortActionPerformed
        // TODO add your handling code here:
        this.ctrl.indicateUserFinishedSelection();
        this.dispose();
    }//GEN-LAST:event_jButtonAbortActionPerformed

    private void jButtonAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAcceptActionPerformed
        // TODO add your handling code here:
        List <ExtensionDTO> listDTO = new ArrayList();
        Object toLoad[] = ((DefaultListModel)this.jListListToload.getModel()).toArray();
        for( Object obj : toLoad){
            if(obj instanceof ExtensionDTO) listDTO.add((ExtensionDTO)obj);
        }
        boolean validate = this.ctrl.validateLoadingList(listDTO);
        if (!validate) {
            Logger.getGlobal().log(Level.SEVERE, "DescriptionExtensionLoaderUI - Loading List Validation Failed. The UI should never fail this.");
            JOptionPane.showMessageDialog(this.rootPane, "Loading List Validation Failed. The UI should never fail this.", "Error" , JOptionPane.ERROR_MESSAGE);
            return;
        }
        int errors = 0;
         errors = this.ctrl.loadList(listDTO);
        if (errors != 0) JOptionPane.showMessageDialog(this.rootPane, "Extension loading failures: " + errors, "Error" , JOptionPane.INFORMATION_MESSAGE);
        this.ctrl.indicateUserFinishedSelection();
        this.dispose();
    }//GEN-LAST:event_jButtonAcceptActionPerformed

    
    /**
     * Moves an extension from the left to the right.
     * @param evt ActionEvent
     */
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        //if(this.)
        if (this.jListAllExtensions.isSelectionEmpty()) return;
        ExtensionDTO selected = (ExtensionDTO)this.jListAllExtensions.getSelectedValue();
        
        this.moveToRightList(selected);// Moves to the right list
    }//GEN-LAST:event_jButtonAddActionPerformed

    /**
     * Moves an extension from the right to the left.
     * @param evt ActionEvent
     */
    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        // TODO add your handling code here:
        if (this.jListListToload.isSelectionEmpty()) return;
        ExtensionDTO selected = (ExtensionDTO)this.jListListToload.getSelectedValue();
        
        this.moveToLeftList(selected);// Moves to the right list
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    /**
     * Clears the ListToLoad.
     * @param evt ActionEvent
     */
    private void jButtonClearLoadListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearLoadListActionPerformed
        // TODO add your handling code here:
        ((DefaultListModel)this.jListListToload.getModel()).clear();
    }//GEN-LAST:event_jButtonClearLoadListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DescriptionExtensionLoaderUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DescriptionExtensionLoaderUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DescriptionExtensionLoaderUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DescriptionExtensionLoaderUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DescriptionExtensionLoaderUi(null, new ArrayList<ExtensionDTO>(),new ArrayList<ExtensionDTO>() ).setVisible(true);
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                System.out.println("ERROR DONT USE THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAbort;
    private javax.swing.JButton jButtonAccept;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonClearLoadList;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jListAllExtensions;
    private javax.swing.JList jListListToload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextAreaInfo;
    // End of variables declaration//GEN-END:variables

    /**
     * Copy an item from the left list to the right list.
     * @param dto item to move.
     */
    public void moveToRightList(ExtensionDTO dto){
        String name = dto.getName();
        
        List <ExtensionDTO> listDTO = new ArrayList();
        Object toLoad[] = ((DefaultListModel)this.jListListToload.getModel()).toArray();
        for( Object obj : toLoad){
            if(obj instanceof ExtensionDTO) listDTO.add((ExtensionDTO)obj);
        }
        
        for(ExtensionDTO aux : listDTO){
            if(aux.getName().equals(name)) {
                ((DefaultListModel)this.jListListToload.getModel()).removeElement(aux);
            }
        }
        ((DefaultListModel)this.jListListToload.getModel()).addElement(dto);
    }
    
    /**
     * Copy an item from right to left
     * @param dto item to copy
     */
    public void moveToLeftList(ExtensionDTO dto){
        String name = dto.getName();
        
        //List <ExtensionDTO> listDTO = new ArrayList();
        //Object allExtensions[] = ((DefaultListModel)this.jListAllExtensions.getModel()).toArray();
        
        ((DefaultListModel)this.jListListToload.getModel()).removeElement(dto);
    }
    

}
