/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.green.s2.core.n1130626.insertimage.ui;

import csheets.core.Cell;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import lapr4.green.s2.core.n1130626.insertimage.ImagenableCell;
import lapr4.green.s2.core.n1130626.insertimage.ImagenableCellListener;
import lapr4.green.s2.core.n1130626.insertimage.Images;
import lapr4.green.s2.core.n1130626.insertimage.ImagesExtension;

/**
 *
 * @author Pedro Pereira
 */
public class ImagesPanel extends javax.swing.JPanel implements SelectionListener, ImagenableCellListener, Observer{

    /**
     * The imagenable cell currently being displayed in the panel
     */
    private ImagenableCell cell;
    
    /**
     * The assertion controller
     */
    private ImageController controller;
    
    /**
     * The User interface controller
     */
    private final UIController uiController;
    
    
    DefaultListModel<String> diretorioLista;
    
    private BufferedImage image;
    
    /**
     * Creates new form ImagesPanel
     * @param uiController the UIController
     */
    public ImagesPanel(UIController uiController) {
        setName(ImagesExtension.NAME);
        initComponents();
        
        //creates controller
        controller = new ImageController(uiController);
        uiController.addSelectionListener(this);
        
        this.uiController = uiController;
        this.diretorioLista = (DefaultListModel) this.jListURL.getModel();
        this.update(null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListURL = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jButtonAddImage = new javax.swing.JButton();
        jButtonRemoveImage = new javax.swing.JButton();
        jPanelImageView = new javax.swing.JPanel();

        jLabel1.setText("Links of the images:");

        jListURL.setModel(new DefaultListModel<String>());
        jListURL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListURLMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListURL);

        jLabel2.setText("Image:");

        jButtonAddImage.setText("Add Image");
        jButtonAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddImageActionPerformed(evt);
            }
        });

        jButtonRemoveImage.setText("Remove Image");
        jButtonRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveImageActionPerformed(evt);
            }
        });

        jPanelImageView.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanelImageViewLayout = new javax.swing.GroupLayout(jPanelImageView);
        jPanelImageView.setLayout(jPanelImageViewLayout);
        jPanelImageViewLayout.setHorizontalGroup(
            jPanelImageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelImageViewLayout.setVerticalGroup(
            jPanelImageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 159, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelImageView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButtonAddImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
                        .addComponent(jButtonRemoveImage))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelImageView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddImage)
                    .addComponent(jButtonRemoveImage))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddImageActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            if(cell != null){
                this.diretorioLista.addElement(fc.getSelectedFile().toString());
                controller.setImage(cell, fc.getSelectedFile().toString());
            }
        }
            
    }//GEN-LAST:event_jButtonAddImageActionPerformed

    private void jButtonRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveImageActionPerformed
        int urlIndex = this.jListURL.getSelectedIndex();
        if(urlIndex >= 0){
            String urlRemoving = this.jListURL.getModel().getElementAt(urlIndex);
            if(cell != null){
                this.diretorioLista.remove(urlIndex);
                controller.removingImage(cell, urlRemoving);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an url", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRemoveImageActionPerformed

    private void jListURLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListURLMouseClicked
        try {
            // TODO add your handling code here:
            String imageName = this.jListURL.getSelectedValue();
            this.image = ImageIO.read(new File(imageName));
        } catch (IOException ex) {
            Logger.getLogger(ImagesPanel.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        this.jPanelImageView.getGraphics().drawImage(image, 0, 0, this.jPanelImageView.getWidth(), this.jPanelImageView.getHeight(), null);
        
    }//GEN-LAST:event_jListURLMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddImage;
    private javax.swing.JButton jButtonRemoveImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListURL;
    private javax.swing.JPanel jPanelImageView;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the images field
     * @param event the selection event that was fired
     */
    @Override
    public void selectionChanged(SelectionEvent event) {
        Cell selectedCell = event.getCell();
        if (selectedCell != null) {
            ImagenableCell activeCell = (ImagenableCell) selectedCell.getExtension(ImagesExtension.NAME);
            activeCell.addImagenableCellListener(this);
            imageChanged(activeCell);
        }
        
        if(event.getPreviousCell() != null){
            ((ImagenableCell) event.getPreviousCell().getExtension(ImagesExtension.NAME)).removeImagenableCellListener(this);
        }
    }

    /**
     * Updates the images field when the images of the active cell is
     * changed.
     * @param cell the cell whose images changed
     */
    @Override
    public void imageChanged(ImagenableCell cell) {
        this.cell = cell;
        
        if(this.cell.hasImages()){
            //this.jListURL.removeAll();
            this.diretorioLista.clear();
            List<Images> imagesList = controller.getImagesList(this.cell);
            for(Images img : imagesList){
                String imageLocation = img.urlLink();
                this.diretorioLista.addElement(imageLocation);
            }
            this.revalidate();
            this.repaint();
        } else {
            //this.jListURL.removeAll();
            this.diretorioLista.clear();
            this.revalidate();
            this.repaint();
        }
    }

    @Override
    public void update(Observable o, Object o1) {
        this.diretorioLista.clear();
            List<Images> imagesList = controller.getImagesList(this.cell);
            for(Images img : imagesList){
                String imageLocation = img.urlLink();
                this.diretorioLista.addElement(imageLocation);
            }
            this.revalidate();
            this.repaint();
    }

    
}
