/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.green.s1.ipc.n1140618.ChatApplication.ui;

import csheets.ui.ctrl.UIController;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import lapr4.blue.s2.ipc.n1140956.ChatApplication.ChatUser;
import lapr4.blue.s2.ipc.n1140956.ChatApplication.ui.ChatUserSettingsUI;
import lapr4.green.s1.ipc.n1140618.ChatApplication.controller.ChatApplicationController;
import lapr4.green.s1.ipc.n1151211.comm.CommExtension2;

/**
 *
 * @author Tiago
 */
public class ChatPanel extends javax.swing.JPanel implements Observer {

    private UIController uiController;

    private ChatApplicationController controller;

    ChatPanel thisPanel;

    /**
     * Creates new form ChatPanel
     *
     * @param uiController
     */
    public ChatPanel(UIController uiController) {
        this.uiController = uiController;
        this.controller = new ChatApplicationController(/*uiController.getUserProperties()*/);
        this.thisPanel = this;
        initComponents();

        this.lblNickname.setText(this.controller.owner().getInfo());

        if (this.controller.owner().getImage().length != 0) {
            BufferedImage img;
            try {
                img = ImageIO.read(new ByteArrayInputStream(this.controller.owner().getImage()));
                this.lblPhoto.setIcon(scaledImageIcon(img));
            } catch (IOException ex) {
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        controller.getListener().addObserver(this);
    }

    public void initUserSettings() {
        if (!this.controller.owner().getNickname().isEmpty()) {
            this.lblNickname.setText(this.controller.owner().getNickname());
        }

        if (this.controller.owner().getImage().length != 0) {
            BufferedImage img;
            try {
                img = ImageIO.read(new ByteArrayInputStream(this.controller.owner().getImage()));
                this.lblPhoto.setIcon(scaledImageIcon(img));
            } catch (IOException ex) {
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private ImageIcon scaledImageIcon(Image theImage) {
        return new ImageIcon(theImage.getScaledInstance(100, 100, Image.SCALE_SMOOTH));
    }

    public String getName() {
        return "Chat";
    }

    public void updateList(HashMap<String, ChatUser> list) {

        DefaultListModel model = new DefaultListModel();
        int flag = 0;
//        for (String onlineUser : list) {
//            model.addElement(onlineUser);
//        }
        list.values().stream().forEach((object) -> {
            if (object.equals(this.controller.owner())) {

            } else if (object.isOnline()) {
                if (!object.getNickname().equalsIgnoreCase("")) {
                    model.addElement(object.getNickname() + "(Online)");
                } else {
                    model.addElement(object.getMachineName() + object.getIp() + "(Online)");
                }
            } else {
                if (!object.getNickname().equalsIgnoreCase("")) {
                    model.addElement(object.getNickname() + "(Offline)");
                } else {
                    model.addElement(object.getMachineName() + object.getIp() + "(Offline)");
                }
            }
        });

        //With persistece
//        for (User u : lstUsers) {
//            if (u.isOnline()) {
//                if (u.getNickname() != null || !u.getNickname().equalsIgnoreCase("")) {
//                    model.addElement(u.getNickname() + "(Online)");
//                } else {
//                    model.addElement(u.getMachineName() + u.getIp() + "(Online)");
//                }
//            } else if (u.getNickname() != null || !u.getNickname().equalsIgnoreCase("")) {
//                model.addElement(u.getNickname() + "(Offline)");
//            } else {
//                model.addElement(u.getMachineName() + u.getIp() + "(Offline)");
//            }
//        }
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        btnSettings = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        lblNickname = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        jLabel1.setText("Users Online:");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Send Message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSettings.setText("Settings");
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        lblPhoto.setPreferredSize(new java.awt.Dimension(40, 40));

        lblNickname.setText("jLabel3");

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 80, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblNickname))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefresh)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNickname)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSettings)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jList1.getSelectedValue() == null) {

            JOptionPane.showMessageDialog(null, "Select the user you wish to talk to!", "Alert!", JOptionPane.INFORMATION_MESSAGE);

        } else {
            String selected = jList1.getSelectedValue();

            if (selected.split("@").length == 2) {
                selected = selected.split(("\\("))[0];
                controller.sendMessage(selected);
            } else {
                selected = selected.split(("\\("))[0];
                String userMachineName = this.controller.getChatUsersList().getUserByNickname(selected).getMachineName();
                String userIp = this.controller.getChatUsersList().getUserByNickname(selected).getIp();

                controller.sendMessage(userMachineName + userIp);
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed

//        new ChatUserSettingsUI(this.controller, this.controller.getChatUsersList().getUserByIP(this.controller.getUser().split("@")[1]));
        new ChatUserSettingsUI(this.controller, this.controller.owner());

    }//GEN-LAST:event_btnSettingsActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        initUserSettings();
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSettings;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNickname;
    private javax.swing.JLabel lblPhoto;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        ArrayList<String> peers = controller.getListener().getServicePeers(CommExtension2.NAME);

        for (String user : peers) {
            String tmp[] = user.split("@");

            String machineName = tmp[0] + "@";
            String id = tmp[1];

            ChatUser chatUser = new ChatUser(machineName, id);
            if (!this.controller.getUsers().containsKey(id)) {
                chatUser.setStatus(true);
                this.controller.addChatUser(chatUser);
            } else {
                this.controller.getChatUsersList().getUserByIP(id).setStatus(true);
            }

            //with persistence
//            User user = new User(machineName,ip);
//            this.controller.changeUserStatus(user,true);
        }

        for (ChatUser user : this.controller.getUsers().values()) {

            String aux = user.getMachineName() + user.getIp();
            if (!peers.contains(aux)) {
                user.setStatus(false);
            }
        }

        //with persistence
//        for (User user : this.controller.getUsers()) {
//            String aux = user.getMachineName() + user.getIp();
//            if (!peers.contains(aux)) {
//                this.controller.changeUserStatus(user, false)
//            }
//        }

        updateList(this.controller.getChatUsersList().getUserList());
//        updateList(peers);

    }
}
