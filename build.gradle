/*
 * Alexandre Braganca (atb@isep.ipp.pt)
 * 
 */

/*
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.sourceforge.plantuml:plantuml:8051'
        classpath 'commons-io:commons-io:2.4'
    }
}
*/

plugins {
    id "org.sonarqube" version "2.3"
    id "argelbargel.gradle.plugins.sonarqube-multiproject-plugin" version "1.2"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'antlr'
apply plugin: 'build-dashboard'
apply plugin: 'org.sonarqube'
apply plugin: "argelbargel.gradle.plugins.sonarqube-multiproject-plugin"

mainClassName = 'csheets.CleanSheets'

group = 'csheets'
version = '1.0-SNAPSHOT'

description = "CleanSheets"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { mavenCentral() }

// Para os testes de aceitacao estarem numa pasta separada
sourceSets {
    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

configurations {
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}

dependencies {
//	antlr "org.antlr:antlr:3.4" // use ANTLR version 3
 	antlr "org.antlr:antlr4:4.7" // use ANTLR version 4

	testCompile 'junit:junit:4.12'

//	compile 'org.antlr:antlr-runtime:3.4'
        
    compile 'org.eclipse.persistence:eclipselink:2.6.1'
	compile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.6.1'
	compile 'com.h2database:h2:1.4.191'
	compile 'org.beanshell:bsh:2.0b5'
	compile 'jfree:jfreechart:1.0.13'
	compile 'org.bouncycastle:bcprov-jdk15on:1.54'
	compile 'org.bouncycastle:bcpkix-jdk15on:1.54'
	compile 'com.itextpdf.tool:xmlworker:5.5.9'
	compile 'javax.mail:javax.mail-api:1.5.2'
	compile 'javax.mail:mail:1.4.7'
	compile 'com.itextpdf:itextpdf:5.5.9'
	
	compile project(':framework')
}

sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
sourceSets.main.antlr.srcDirs = [ 'src/main/antlr4/']

compileJava.dependsOn(processResources)

//compileJava {
//	sourceCompatibility = '1.8'
//}

// ANTLR 4.7 Support
generateGrammarSource {
    //println sourceSets.main.antlr.flatten()
    //outputDirectory = [ "${project.buildDir}/generated-src/main/antlr"]
    //arguments += ["-visitor", sourceSets.main.antlr.flatten()].flatten()
    
    //maxHeapSize = "64m"
    arguments += ["-visitor"]
//    arguments = ["-visitor", "-long-messages"]
}

task renderPlantUml (type: RenderPlantUmlTask);

//task cleanPlantUml (type: CleanPlantUmlTask);

/*
def paths = [:]
def listOfPaths = []

def access = {d, path ->
    if (d[path] == null) {
        d[path] = [:]
    } 
    return d[path]        
}

task listar  {
    new File('./src/main/java').eachFileRecurse( FileType.DIRECTORIES, 
        { file ->
            file.eachFileMatch(~/.*.puml/) 
            { pumlFile ->
                listOfPaths << pumlFile.toString().tokenize('/') 
            }
        }
    )

    println listOfPaths
    
    /*
    listOfPaths.each{ path ->
            def currentPath = paths
            path.each { step ->
                currentPath = access(currentPath, step)
            }
    }
    
}
*/

javadoc { 
    source = sourceSets.main.allJava
    options.overview = "src/main/javadoc/overview.html" // relative to source root
    options.groups.put ('Application Core', ['csheets', 'csheets.core*', 'csheets.io*'])
    options.groups.put ('User Interface', ['csheets.ui*'])
    options.groups.put ('Extension Mechanism', ['csheets.ext', 'csheets.ui.ext*'])
    options.groups.put ('Extensions', ['csheets.ext*'])

	// Black    
    options.groups.put ('Black Team/Sprint 1/IPC', ['lapr4.black.s1.ipc.*'])
    
    // Gray
    options.groups.put ('Gray Team/Sprint 1/Lang', ['lapr4.gray.s1.lang.*'])
    
    // White
    options.groups.put ('White Team/Sprint 1/Core', ['lapr4.white.s1.core.*'])

    // RED
    options.groups.put ('Red Team/Sprint 1/Core', ['lapr4.red.s1.core.*'])
    options.groups.put ('Red Team/Sprint 1/Lang', ['lapr4.red.s1.lang.*'])
    options.groups.put ('Red Team/Sprint 1/IPC', ['lapr4.red.s1.ipc.*'])
    options.groups.put ('Red Team/Sprint 2/Core', ['lapr4.red.s2.core.*'])
    options.groups.put ('Red Team/Sprint 2/Lang', ['lapr4.red.s2.lang.*'])
    options.groups.put ('Red Team/Sprint 2/IPC', ['lapr4.red.s2.ipc.*'])
    options.groups.put ('Red Team/Sprint 3/Core', ['lapr4.red.s3.core.*'])
    options.groups.put ('Red Team/Sprint 3/Lang', ['lapr4.red.s3.lang.*'])
    options.groups.put ('Red Team/Sprint 3/IPC', ['lapr4.red.s3.ipc.*'])

    // GREEN
    options.groups.put ('Green Team/Sprint 1/Core', ['lapr4.green.s1.core.*'])
    options.groups.put ('Green Team/Sprint 1/Lang', ['lapr4.green.s1.lang.*'])
    options.groups.put ('Green Team/Sprint 1/IPC', ['lapr4.green.s1.ipc.*'])
    options.groups.put ('Green Team/Sprint 2/Core', ['lapr4.green.s2.core.*'])
    options.groups.put ('Green Team/Sprint 2/Lang', ['lapr4.green.s2.lang.*'])
    options.groups.put ('Green Team/Sprint 2/IPC', ['lapr4.green.s2.ipc.*'])
    options.groups.put ('Green Team/Sprint 3/Core', ['lapr4.green.s3.core.*'])
    options.groups.put ('Green Team/Sprint 3/Lang', ['lapr4.green.s3.lang.*'])
    options.groups.put ('Green Team/Sprint 3/IPC', ['lapr4.green.s3.ipc.*'])
    
    // BLUE
    options.groups.put ('Blue Team/Sprint 1/Core', ['lapr4.blue.s1.core.*'])
    options.groups.put ('Blue Team/Sprint 1/Lang', ['lapr4.blue.s1.lang.*'])
    options.groups.put ('Blue Team/Sprint 1/IPC', ['lapr4.blue.s1.ipc.*'])
    options.groups.put ('Blue Team/Sprint 2/Core', ['lapr4.blue.s2.core.*'])
    options.groups.put ('Blue Team/Sprint 2/Lang', ['lapr4.blue.s2.lang.*'])
    options.groups.put ('Blue Team/Sprint 2/IPC', ['lapr4.blue.s2.ipc.*'])
    options.groups.put ('Blue Team/Sprint 3/Core', ['lapr4.blue.s3.core.*'])
    options.groups.put ('Blue Team/Sprint 3/Lang', ['lapr4.blue.s3.lang.*'])
    options.groups.put ('Blue Team/Sprint 3/IPC', ['lapr4.blue.s3.ipc.*'])
    
    //options.groups.put ('Work Log', ['csheets.worklog*'])
}

javadoc.dependsOn(renderPlantUml)

// A task to run the acceptance tests
task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    outputs.upToDateWhen { false }		// to insure acceptance tests always run!
}

check.dependsOn acceptanceTest
acceptanceTest.mustRunAfter test

// We can ensure that the HTML reports of unit and integration tests are created to different
// report directories by adding the following snippet to our build.gradle file:
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

//-------
// JACOCO
jacoco {
	applyTo run
	// applyTo acceptanceTest 
}

//task runCoverageReport(type:JacocoReport){
//	executionData run
//	sourceSets sourceSets.main
//
//	afterEvaluate {
//		classDirectories = files(classDirectories.files.collect {
//			fileTree(dir: it, exclude: '**/test/**')
//		})
//	}
//}

task acceptanceTestCoverageReport(type:JacocoReport){
	executionData acceptanceTest
	sourceSets sourceSets.main

//	afterEvaluate {
//		classDirectories = files(classDirectories.files.collect {
//			fileTree(dir: it, exclude: '**/test/**')
//		})
//	}
}

// run.finalizedBy runCoverageReport

// Para o jacoco sobre testes unitarios
//jacocoTestReport {
//    reports {
//        xml.enabled false
//        csv.enabled false
//        html.destination "${buildDir}/jacocoHtml"
//    }
//}

jacocoTestReport.dependsOn test

acceptanceTestCoverageReport.dependsOn acceptanceTest

jar {
    manifest {
        attributes 'Main-Class': 'csheets.CleanSheets'
    }
}

// Sonarqube
sonarqube {
    properties {
        property "sonar.host.url",  "http://sonarqube.dei.isep.ipp.pt:9000"   // The url of the sonarqube server
        property "sonar.jacoco.reportPaths", "$buildDir/jacoco/test.exec, $buildDir/jacoco/acceptanceTest.exec"
// Deprecated from sonar 6.2        
//        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
//        property "sonar.jacoco.itReportPath", "$buildDir/jacoco/acceptanceTest.exec"
    }
}

// To execute formula console:
task runCompilerConsole (type: JavaExec, dependsOn: classes){
    /* Can pass all the properties: */
    systemProperties System.getProperties()
    standardInput = System.in
    description = "Testing Compiler Formulas"
    main = "csheets.core.formula.compiler.Console"
    classpath = sourceSets.main.runtimeClasspath
}

// INSTRUCOES

// To run only unit tests:
// gradle clean test 

// To run only acceptance tests:
// gradle clean acceptanceTest 

// To run all tests:
// gradle clean test acceptanceTest
// or:
// gradle clean build

// Para produzir relatorio de cobertura jacoco para os testes unitarios (antes executar os testes unitarios)
// gradle jacocoTestReport 

// Para produzir relatorio de cobertura jacoco para os testes de aceitacao (antes executar os testes de aceitacao)
// gradle acceptanceTestCoverageReport 

// Para construir o jar (o jar fica na pasta build/libs)
// gradle jar

// Para construir uma "distribuicao" (em build/distributions e build/scripts
// gradle assemble


